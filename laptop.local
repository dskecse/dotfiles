#!/usr/bin/env bash

if [[ ! -d "$HOME/.oh-my-zsh/" ]]; then
  fancy_echo "Installing oh-my-zsh ..."
    curl -L http://install.ohmyz.sh | sh
fi

brew_install_or_upgrade 'graphviz'
brew_install_or_upgrade 'tree'
brew_install_or_upgrade 'ipcalc'
brew_install_or_upgrade 'mc'
brew_install_or_upgrade 'nmap'
brew_install_or_upgrade 'tig --with-docs'
brew_install_or_upgrade 'dos2unix'
brew_install_or_upgrade 'screenfetch'

fancy_echo "Installing MySQL ..."
  brew_install_or_upgrade 'mysql'

# http://stackoverflow.com/questions/9134423/os-x-lion-attempting-nokogiri-install-libxml2-is-missing
# http://www.nokogiri.org/tutorials/installing_nokogiri.html
fancy_echo "Installing libxml and libxslt ..."
  brew_install_or_upgrade 'libxml2'
  brew_install_or_upgrade 'libxslt'

  # In the past it was necessary to install Apple's XCode IDE to get
  # basic tools like GCC, Git and Subversion on your machine, but
  # nowadays there is a slim solution by just installing the command line tools
  xcode-select --install

fancy_echo "Installing PhantomJS, a scriptable headless webkit ..."
  brew_tap 'homebrew/versions'
  brew_install_or_upgrade 'phantomjs182'

fancy_echo "Installing jsl, a JavaScript linter ..."
  brew_tap 'homebrew/binary'
  brew_install_or_upgrade 'jsl'

fancy_echo "Installing Erlang OTP ..."
  brew_install_or_upgrade 'erlang'

fancy_echo "Installing Elixir ..."
  brew_install_or_upgrade 'elixir'

fancy_echo "Installing Homebrew Cask ..."
  brew_install_or_upgrade 'caskroom/cask/brew-cask'

brew_cask_install_or_skip() {
  if ! brew_cask_is_installed "$1"; then
    brew cask install "$@"
  else
    fancy_echo "$1 already installed. Skipping ..."
  fi
}

brew_cask_is_installed() {
  local name="$(brew_cask_expand_alias "$1")"

  brew cask list -1 | grep -Fqx "$name"
}

brew_cask_expand_alias() {
  brew cask info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

fancy_echo "Installing iterm2 ..."
  brew_cask_install_or_skip 'iterm2'

fancy_echo "Installing Java ..."
  brew_cask_install_or_skip 'java'

# http://hanxue-it.blogspot.com/2014/05/installing-java-8-managing-multiple.html
if ! command -v jenv >/dev/null; then
  fancy_echo "Installing jenv, a Java version management tool ..."
    brew_install_or_upgrade 'jenv'
    eval "$(jenv init -)"

    # Get rid of hardcoded path
    jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_25.jdk/Contents/Home

    # Look for all known binaries and create the necessary shims
    jenv rehash
    jenv global oracle64-1.8.0.25
else
  fancy_echo "jenv already installed. Skipping ..."
fi

fancy_echo "Installing maven ..."
  brew_install_or_upgrade 'maven'

fancy_echo "Installing elasticsearch ..."
  brew_install_or_upgrade 'elasticsearch'

fancy_echo "Installing macvim ..."
  brew_install_or_upgrade 'macvim --with-lua --with-luajit'

  if [[ ! -d "$HOME/.vim/" ]]; then
    git clone git@ssh.github.com:dskecse/dotvim.git ~/.vim
    pushd ~/.vim
    rake setup
    popd
  fi

fancy_echo "Installing emacs ..."
  brew_install_or_upgrade 'emacs --cocoa'

# TODO: set up python development environment

# TODO: install Google App Engine SDK
# https://cloud.google.com/appengine/downloads
sudo pip install lxml
# http://stackoverflow.com/questions/21004960/no-module-named-lxml-html-while-running-python-script-on-fedora

# http://cran.rstudio.com/
fancy_echo "Installing R ..."
  brew_cask_install_or_skip 'R'

# http://www.rstudio.com/ide/download/desktop
fancy_echo "Installing RStudio ..."
  brew_cask_install_or_skip 'rstudio'

fancy_echo "Installing ghc ..."
  brew_install_or_upgrade 'ghc'
  brew_install_or_upgrade 'cabal-install'

fancy_echo "Installing MongoDB ..."
  brew_install_or_upgrade 'mongodb'

fancy_echo "Installing Firefox ..."
  brew_cask_install_or_skip 'firefox'

fancy_echo "Installing chromedriver ..."
  brew_install_or_upgrade 'chromedriver'

fancy_echo "Installing ngrok, a reverse proxy ..."
  brew_cask_install_or_skip 'ngrok'

fancy_echo "Installing Dropbox client ..."
  brew_cask_install_or_skip 'dropbox'

if ! command -v rustc >/dev/null; then
  fancy_echo "Installing Rust (nightly build) ..."
    curl -s https://static.rust-lang.org/rustup.sh | sudo sh
    rustc -v
else
  echo "Rust already installed. Skipping ..."
fi

fancy_echo "Installing skype ..."
  brew_cask_install_or_skip 'skype'

fancy_echo "Installing pow ..."
  brew_install_or_upgrade 'pow'
  gem_install_or_update 'powder'

fancy_echo "Installing Valgrind ..."
  brew_install_or_upgrade "valgrind"

fancy_echo "Installing gitx ..."
  brew_cask_install_or_skip 'gitx'

fancy_echo "Installing nasm ..."
  brew_install_or_upgrade 'nasm'

fancy_echo "Installing gpg ..."
  brew_install_or_upgrade 'gpg2'
  # To get rid of "error: could not run gpg." w/ git-commit
  brew_install_or_upgrade 'gpg'

fancy_echo "Installing RabbitMQ ..."
  brew_install_or_upgrade 'rabbitmq'

fancy_echo "Installing memcached ..."
  brew_install_or_upgrade 'memcached'

fancy_echo "Installing awscli ..."
  brew_install_or_upgrade 'awscli'

  if [[ ! -d "$HOME/.aws" ]]; then
    aws configure
  fi

fancy_echo "Installing jq ..."
  brew_install_or_upgrade 'jq'

fancy_echo "Installing Nginx w/ support for Phusion Passenger module ..."
  brew_install_or_upgrade 'pcre --universal'
  brew_install_or_upgrade 'passenger'
  brew_install_or_upgrade 'nginx --with-passenger'
